<?xml version="1.0" encoding="ISO-8859-1"?>
<faqs xmlns="http://maven.apache.org/FML/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/FML/1.0.1 http://maven.apache.org/xsd/fml-1.0.1.xsd"
	title="Frequently Asked Questions" toplink="false">
	<part id="Getting Help">
		<title>Getting Help</title>
		<faq id="getting_help">
			<question>Where can I ask questions or get help?</question>
			<answer>
			   <p>
			      Please see [this page](https://github.com/jamesagnew/hapi-fhir/wiki/Getting-Help) in the HAPI FHIR Wiki for information on getting help.
			   </p>
			</answer>
		</faq>
	</part>
	<part id="Using HAPI">
		<title>Using HAPI</title>
		<faq id="jdk_version">
			<question>
				What JDK version does HAPI support?
			</question>
			<answer>
				<p>
					HAPI supports JDK 1.6 for the entire library, except for the CLI tool which is 1.8. 
				</p>
				<p>
					Note that the HAPI library itself also requires a 1.8 JDK to build, since the unit tests 
					have JDK 1.8 dependencies.
				</p>
			</answer>
		</faq>
	</part>
	<part id="JPA Server">
		<title>JPA Server</title>
		<faq id="access_underlying_derby_database">
			<question>
				I would like to connect to the Derby database using a JDBC database browser (e.g. Squirrel, Toad, DBVisualizer)
				so that I can access the underlying tables. How do I do that?
			</question>
			<answer>
				<p>
					By default Derby doesn't actually open any TCP ports for you to connect externally to it. 
					Being an embedded database, it works a bit differently than other databases in that the 
					client actually is the database and there's no outside communication with it possible.
				</p>
				<p>
					There are a few options available to work around this fact:
					<ul>
						<li>
							The easiest thing is to just load your data using the FHIR API. E.g. you can 
							use HTTP/REST creates, transactions, etc to load data into your database directly.
						</li>
						<li>
							If you want to access the underlying database, the next easiest thing is to configure 
							the database to use a filesystem directory, e.g. 
							"<code>jdbc:derby:directory:target/jpaserver_derby_files;create=true</code>". You can 
							then shut the server down and use that same URL to connect a derby client (e.g. 
							Squirrel or DBVisualizer) to the same path. You may need to use a fully qualified 
							path instead of a relative one though.
						</li>
						<li>
							Another option is to use a different database (e.g. MySQL, Postgres, Oracle, etc.). 
							HAPI's JPA server is based on JPA/Hibernate so it will support any database platform 
							that hibernate supports.
						</li>
						<li>
							A final option is to start up Derby in network mode. Doing this is a bit more 
							involved since you need to start the derby server separately, and then use a special
							URL to connect to it. You can find an example of how to start network Derby 
							<a href="https://github.com/jamesagnew/hapi-fhir/blob/master/hapi-fhir-jpaserver-uhnfhirtest/src/main/java/ca/uhn/fhirtest/DerbyNetworkServer.java">here</a> 
							and
							an example of setting up a datasource 
							<a href="https://github.com/jamesagnew/hapi-fhir/blob/master/hapi-fhir-jpaserver-uhnfhirtest/src/main/java/ca/uhn/fhirtest/config/TestDstu3Config.java">here</a>.
						</li>
					</ul>
				</p>
			</answer>
		</faq>
	</part>
	<part id="Contributing">
		<title>Contributing</title>
		<faq id="vm_quit_during_build">
			<question>
				My build is failing with the following error:
				<code>[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test (default-test) on project hapi-fhir-jpaserver-base: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test failed: The forked VM terminated without properly saying goodbye. VM crash or System.exit called?</code>
			</question>
			<answer>
				<p>
					This typically means that your build is running out of memory. HAPI's unit tests execute by 
					default in multiple threads (the thread count is determined by the number of CPU cores available)
					so in an environment with lots of cores but not enough RAM, you may run out. If you are getting
					this error, try executing the build with the following arguments:
				</p>
				<pre>mvn -P ALLMODULES,NOPARALLEL install</pre>
				<p>
					See <a href="/hacking_hapi_fhir.html">Hacking HAPI FHIR</a> for more information on 
					the build process.
				</p>
			</answer>
		</faq>
	</part>
</faqs>
